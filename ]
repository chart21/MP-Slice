# MP-Slice: Seucre Mulitparty Computaiton Framework supporting Bitslicing and V-Slicing

## Usage
First configure the program using config.sh. Then run the player executable

### Configuaration
Run config.sh with your desired parameters. 

```
  Script to configure and compile executables for a run.
  Only arguments you want to change have to be set.
  -b base_port: Needs to be the same for all players for successful networking (e.g. 6000)
  -d Datatype used for slicing: 1(bool),8(char),64(uint64),128(SSE),256(AVX),512(AVX512)
  -p Player ID (0/1/2). Use all for compilling all platers
  -f Name of the function to execute
  -c Pack Bool in Char before sending? (0/1). Only used with -d 1
  -s MPC Protocol (1(Sharemind),2(Replicated),3(Astra),4(OEC DUP),5(OEC REP),6(TTP))
  -i Initialize circuit seperatly (0) or at runtime (1)?
  -l Include the Online Phase in this executable  (0/1)?
  -l Compile circuit with Preprocessing phase before online phase  (0/1)?
  -o Use additional assumptions to optimize the sharing phase? (0/1)
  -u Number of players in total
  -g Compile flags (other than standard)
  -x Compiler (g++/clang++/..)
```

The following configuration compiles an executable for P2, 1024 inputs, sliced 256 times in an AVX variable, using Protocol OEC-DUP. The executable contains an initialization phase and an online phase.
> ./config.sh -p 2 -n 1024 -d 256 -s 4 -l 1 -i 1 -e 0 

The following configuration uses the previous configuration but adds a preprocessing phase before the online phase (only supported with OEC-DUP and OPT_Share currently).
> ./config.sh -p 2 -e 1 -o 1

The following configuration uses the previous configuration but compiles an executable for all players. Useful when running the parties on the same host.
> ./config.sh -p all

The following configuration compiles 6 executable for player 2 (all player combinations) and runs all executables in parallel.
> ./split-roles.sh -p 2 -a IP_P0 -b IP_P1

### Execution
Execute P0 executable. (Assuming TTP is set to external via -t 0)
> ./search-P0.o IP_P0 IP_P2

Execute P1 executable.
> ./search-P1.o IP_P0 IP_P2


...

Execute all players locally:
> ./Scripts/run_protocol.sh -f search

## Example

Config.

```C
#define base_port 6000
#define ttp_is_input_party 1
#define DATATYPE int
#define input_players 3
#define performFunction array_ops
#define op +
#define INPUTSLENGTH {4,4,4}
```

P0 output after execution.

```
TTP: Acting as input party P0
TTP: Attempting to connect to Player 1 ...
TTP: Attempting to connect to Player 2 ...
TTP: Connected to Player 1
TTP: Connected to Player 2
All clients connected sucessfully, starting protocol and timer!
92 59 83 98
Time measured to read and receive inputs: 0.000364s
Time measured to perform computation: 0.000034s
Time measured in total: 0.000398s
```

After running `config.sh -t 0` and executing.

```
TTP: Acting as an external party
TTP: Attempting to connect to Player 0 ...
TTP: Attempting to connect to Player 1 ...
TTP: Attempting to connect to Player 2 ...
TTP: Connected to Player 1
TTP: Connected to Player 0
TTP: Connected to Player 2
All clients connected sucessfully, starting protocol and timer!
92 59 83 98
Time measured to read and receive inputs: 0.000412s
Time measured to perform computation: 0.000036s
Time measured in total: 0.000448s
```

### Features to be added

- SSL Encryption.
- Communication in network-byte order (Systems with different endianness are not supported currently).

